{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Game.js","reportWebVitals.js","index.js"],"names":["Square","className","this","props","value","onClick","React","Component","Board","table","i","squares","length","push","renderSquare","e","renderTable","map","row","index","element","calculateWinner","lines","a","b","c","includes","Game","state","history","Array","fill","score","x","o","stepNumber","xIsNext","showSteps","slice","setState","concat","step","xisNext","current","winner","moves","move","desc","jumpTo","status","handleClick","type","id","onChange","htmlFor","clearScore","playAgain","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb373078.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Square extends React.Component{\r\n    render(){\r\n        return(\r\n            <td\r\n                className={`square ${this.props.value ? 'active' : ''}`}\r\n                onClick={this.props.onClick}\r\n            >\r\n                <span>{this.props.value}</span>\r\n            </td>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Square from '../Square/Square.js';\r\n\r\nclass Board extends React.Component {\r\n    renderTable(){\r\n        let table = [[],[],[]];\r\n\r\n        for (let i = 0; i < this.props.squares.length; i++){\r\n            if(i <= 2){\r\n                table[0].push(this.renderSquare(i));\r\n            }\r\n            if(i > 2 && i <= 5 ){\r\n                table[1].push(this.renderSquare(i));\r\n            }\r\n            if(i >= 6){\r\n                table[2].push(this.renderSquare(i));\r\n            }\r\n        }\r\n\r\n        return table;\r\n    }\r\n\r\n    renderSquare(i){\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                onClick={(e) => {\r\n                    this.props.onClick(i);\r\n                }}\r\n                key={i}\r\n            />\r\n        )\r\n    }\r\n\r\n    render(){\r\n        const table = this.renderTable();\r\n        return(\r\n            <table>\r\n                <tbody>\r\n                {table.map((row, index) => {\r\n                    return(\r\n                        <tr className={'board-row'} key={index}>\r\n                            {\r\n                                row.map((element) => {\r\n                                    return(\r\n                                        element\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    )\r\n                })}\r\n                </tbody>\r\n            </table>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './Board/Board.js';\r\nimport '../scss/Game.scss';\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null)\r\n            }],\r\n            score: {\r\n                x: 0,\r\n                o: 0,\r\n            },\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            showSteps: false,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            //if we have a winner or all squares is busy, just return from handleClick\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        }, () => {\r\n            //if someone wins, increase the counter of winner\r\n\r\n            switch (calculateWinner(squares)) {\r\n                case 'X' :\r\n                    this.setState({\r\n                        score: {\r\n                            x: this.state.score.x + 1,\r\n                            o: this.state.score.o,\r\n                        }\r\n                    });\r\n                    break;\r\n                case 'O':\r\n                    this.setState({\r\n                        score: {\r\n                            x: this.state.score.x,\r\n                            o: this.state.score.o + 1,\r\n                        }\r\n                    });\r\n                    break;\r\n                default: return;\r\n            }\r\n        });\r\n    }\r\n\r\n    clearScore() {\r\n        //clear score of wins\r\n        this.setState({\r\n            score: {\r\n                x: 0,\r\n                o: 0,\r\n            }\r\n        })\r\n    }\r\n\r\n    playAgain() {\r\n        //refresh the history and steps for new game\r\n        this.setState({\r\n            history: [{\r\n                squares: Array(9).fill(null)\r\n            }],\r\n            stepNumber: 0,\r\n        })\r\n    }\r\n\r\n    jumpTo(step) {\r\n        //navigation inside steps history\r\n        if (step) {\r\n            this.setState({\r\n                stepNumber: step,\r\n                xisNext: (step % 2) === 0\r\n            })\r\n        } else {\r\n            this.setState({\r\n                history: [{\r\n                    squares: Array(9).fill(null)\r\n                }],\r\n                stepNumber: 0,\r\n            })\r\n        }\r\n    }\r\n\r\n    showSteps() {\r\n        //show or hide history of steps\r\n        this.setState({\r\n            showSteps: !this.state.showSteps\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const stepNumber = this.state.stepNumber;\r\n        const current = history[stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        const moves = history.map((step, move) => {\r\n            if (move) {\r\n                //render history steps\r\n                const desc = `To next move ${move}`;\r\n                return (\r\n                    <li key={move}>\r\n                        <button onClick={() => this.jumpTo(move)}\r\n                                className={'game-info__jump-to game-btn'}>{desc}</button>\r\n                    </li>\r\n                )\r\n            } else {\r\n                return null\r\n            }\r\n        });\r\n        const status = (winner) ?\r\n            (winner === 'Draw') ? `Draw` : `Winner ${winner}` :\r\n            `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\r\n\r\n        return (\r\n            <div className={'game'}>\r\n                <div className={'game-info game-info_left'}>\r\n                    <p className={'game-info__cap'}>Actions:</p>\r\n                    <div className={'game-info__player'}>\r\n                        <span className={'game-score__player-score'}>{status}</span>\r\n                    </div>\r\n                    <div className={'game-info__player'}>\r\n                            <span className={'game-score__player-score'}>\r\n                                Steps remain: {current.squares.length - stepNumber}\r\n                            </span>\r\n                    </div>\r\n                    {this.state.showSteps ? (\r\n                        <div className={'history-wrapper'}>\r\n                            <p className={'game-info__cap'}>Steps history:</p>\r\n                            <ul className={'game-info__list'}>{moves}</ul>\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n                <div className={'game-board'}>\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className={'game-info game-info_right'}>\r\n                    <p className={'game-info__cap'}>Total score:</p>\r\n                    <div className={'game-info__player game-info__player_x'}>\r\n                        <span className={'game-info__player-score'}>{`Player X: ${this.state.score.x}`}</span>\r\n                    </div>\r\n                    <div className={'game-info__player game-info__player_o'}>\r\n                        <span className={'game-info__player-score'}>{`Player O: ${this.state.score.o}`}</span>\r\n                    </div>\r\n                    <div className={'game-info__show-steps'}>\r\n                        <input\r\n                            type='checkbox' id=\"show-steps\" className={'ios-switch'}\r\n                            onChange={() => this.showSteps()}\r\n                        />\r\n                        <label htmlFor=\"show-steps\">Show history</label>\r\n                    </div>\r\n                    <button\r\n                        className={'game-info__reset game-btn'}\r\n                        onClick={() => this.clearScore()}\r\n                    >\r\n                        Reset score\r\n                    </button>\r\n                    {winner ? (\r\n                        <button\r\n                            className={'game-info__again game-btn'}\r\n                            onClick={() => this.playAgain()}\r\n                        >\r\n                            Play again\r\n                        </button>) : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    //calculate who win or draw status\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        } else {\r\n            if (!squares.includes(null)) {\r\n                return 'Draw'\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default Game;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './components/Game';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}