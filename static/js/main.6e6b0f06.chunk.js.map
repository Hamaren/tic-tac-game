{"version":3,"sources":["components/Square/Square.js","components/Board/Board.js","components/Game.js","reportWebVitals.js","index.js"],"names":["Square","className","this","props","value","onClick","React","Component","Board","table","i","squares","length","push","renderSquare","e","renderTable","map","row","index","element","calculateWinner","lines","a","b","c","indexOf","Game","state","history","Array","fill","score","x","o","stepNumber","xIsNext","showSteps","slice","setState","concat","step","xisNext","current","winner","moves","move","desc","jumpTo","status","handleClick","type","id","onChange","htmlFor","clearScore","playAgain","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e6b0f06.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Square extends React.Component{\n    render(){\n        return(\n            <td\n                className={`square ${this.props.value ? 'active' : ''}`}\n                onClick={this.props.onClick}\n            >\n                <span>{this.props.value}</span>\n            </td>\n        )\n    }\n}\n\nexport default Square;","import React from \"react\";\nimport Square from '../Square/Square.js';\n\nclass Board extends React.Component {\n    renderTable(){\n        let table = [[],[],[]];\n\n        for (let i = 0; i < this.props.squares.length; i++){\n            if(i <= 2){\n                table[0].push(this.renderSquare(i));\n            }\n            if(i > 2 && i <= 5 ){\n                table[1].push(this.renderSquare(i));\n            }\n            if(i >= 6){\n                table[2].push(this.renderSquare(i));\n            }\n        }\n\n        return table;\n    }\n\n    renderSquare(i){\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={(e) => {\n                    this.props.onClick(i);\n                }}\n                key={i}\n            />\n        )\n    }\n\n    render(){\n        const table = this.renderTable();\n        return(\n            <table>\n                <tbody>\n                {table.map((row, index) => {\n                    return(\n                        <tr className={'board-row'} key={index}>\n                            {\n                                row.map((element) => {\n                                    return(\n                                        element\n                                    )\n                                })\n                            }\n                        </tr>\n                    )\n                })}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default Board;","import React from 'react';\nimport Board from './Board/Board.js';\nimport '../scss/Game.scss';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            score: {\n                x: 0,\n                o: 0,\n            },\n            stepNumber: 0,\n            xIsNext: true,\n            showSteps: false,\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            //if we have a winner or all squares is busy, just return from handleClick\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        }, () => {\n            //if someone wins, increase the counter of winner\n\n            switch (calculateWinner(squares)) {\n                case 'X' :\n                    this.setState({\n                        score: {\n                            x: this.state.score.x + 1,\n                            o: this.state.score.o,\n                        }\n                    });\n                    break;\n                case 'O':\n                    this.setState({\n                        score: {\n                            x: this.state.score.x,\n                            o: this.state.score.o + 1,\n                        }\n                    });\n                    break;\n                default: return;\n            }\n        });\n    }\n\n    clearScore() {\n        //clear score of wins\n        this.setState({\n            score: {\n                x: 0,\n                o: 0,\n            }\n        })\n    }\n\n    playAgain() {\n        //refresh the history and steps for new game\n        this.setState({\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            stepNumber: 0,\n        })\n    }\n\n    jumpTo(step) {\n        //navigation inside steps history\n        if (step) {\n            this.setState({\n                stepNumber: step,\n                xisNext: (step % 2) === 0\n            })\n        } else {\n            this.setState({\n                history: [{\n                    squares: Array(9).fill(null)\n                }],\n                stepNumber: 0,\n            })\n        }\n    }\n\n    showSteps() {\n        //show or hide history of steps\n        this.setState({\n            showSteps: !this.state.showSteps\n        })\n    }\n\n    render() {\n        const history = this.state.history;\n        const stepNumber = this.state.stepNumber;\n        const current = history[stepNumber];\n        const winner = calculateWinner(current.squares);\n        const moves = history.map((step, move) => {\n            if (move) {\n                //render history steps\n                const desc = `To next move ${move}`;\n                return (\n                    <li key={move}>\n                        <button onClick={() => this.jumpTo(move)}\n                                className={'game-info__jump-to game-btn'}>{desc}</button>\n                    </li>\n                )\n            } else {\n                return null\n            }\n        });\n        const status = (winner) ?\n            (winner === 'Draw') ? `Draw` : `Winner ${winner}` :\n            `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n\n        return (\n            <div className={'game'}>\n                <div className={'game-info game-info_left'}>\n                    <p className={'game-info__cap'}>Actions:</p>\n                    <div className={'game-info__player'}>\n                        <span className={'game-score__player-score'}>{status}</span>\n                    </div>\n                    <div className={'game-info__player'}>\n                            <span className={'game-score__player-score'}>\n                                Steps remain: {current.squares.length - stepNumber}\n                            </span>\n                    </div>\n                    {this.state.showSteps ? (\n                        <div className={'history-wrapper'}>\n                            <p className={'game-info__cap'}>Steps history:</p>\n                            <ul className={'game-info__list'}>{moves}</ul>\n                        </div>\n                    ) : null}\n                </div>\n                <div className={'game-board'}>\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className={'game-info game-info_right'}>\n                    <p className={'game-info__cap'}>Total score:</p>\n                    <div className={'game-info__player game-info__player_x'}>\n                        <span className={'game-info__player-score'}>{`Player X: ${this.state.score.x}`}</span>\n                    </div>\n                    <div className={'game-info__player game-info__player_o'}>\n                        <span className={'game-info__player-score'}>{`Player O: ${this.state.score.o}`}</span>\n                    </div>\n                    <div className={'game-info__show-steps'}>\n                        <input\n                            type='checkbox' id=\"show-steps\" className={'ios-switch'}\n                            onChange={() => this.showSteps()}\n                        />\n                        <label htmlFor=\"show-steps\">Show history</label>\n                    </div>\n                    <button\n                        className={'game-info__reset game-btn'}\n                        onClick={() => this.clearScore()}\n                    >\n                        Reset score\n                    </button>\n                    {winner ? (\n                        <button\n                            className={'game-info__again game-btn'}\n                            onClick={() => this.playAgain()}\n                        >\n                            Play again\n                        </button>) : null}\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction calculateWinner(squares) {\n    //calculate who win or draw status\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        } else {\n            if (squares.indexOf(null) === -1) {\n                return 'Draw'\n            }\n        }\n    }\n\n    return null;\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/Game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}